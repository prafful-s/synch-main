name: ⚡ Sync with Template (Direct Merge - No Review)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-template-direct:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main  # Ensure we're working with main branch

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Ensure we're on main branch
      run: |
        # Switch to main branch and ensure it's up to date
        git checkout main
        git pull origin main

    - name: Add template repository as remote
      run: |
        # Template repository: prafful-s/synch-main
        git remote add template https://github.com/prafful-s/synch-main.git
        # Fetch only the main branch from template
        git fetch template main

    - name: Check for updates
      id: check-updates
      run: |
        # Get the latest commit from template
        TEMPLATE_LATEST=$(git rev-parse template/main)
        CURRENT_LATEST=$(git rev-parse HEAD)
        
        echo "Template latest: $TEMPLATE_LATEST"
        echo "Current latest: $CURRENT_LATEST"
        
        if [ "$TEMPLATE_LATEST" != "$CURRENT_LATEST" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "template_commit=$TEMPLATE_LATEST" >> $GITHUB_OUTPUT
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
        fi

    - name: Direct merge template updates
      id: sync-changes
      if: steps.check-updates.outputs.has_updates == 'true'
      run: |
        # Create an archive branch from current state before syncing
        ARCHIVE_BRANCH="main-archive-$(date +%Y%m%d-%H%M%S)"
        echo "Creating archive branch: $ARCHIVE_BRANCH"
        git checkout -b "$ARCHIVE_BRANCH"
        git push origin "$ARCHIVE_BRANCH"
        
        # Switch back to main for the sync
        git checkout main
        
        # Define files to ignore during sync (add your custom files here)
        IGNORE_FILES=(
          "paths.json"
          "fstab.yaml"
        )
        
        # Backup ignored files before merge
        for file in "${IGNORE_FILES[@]}"; do
          if [ -e "$file" ]; then
            echo "Backing up: $file"
            cp -r "$file" "$file.backup" 2>/dev/null || true
          fi
        done
        
        # Merge from template with strategy to prefer template changes
        # Use -X theirs to automatically resolve conflicts by preferring template version
        # This works well since we're syncing FROM the template TO the child
        # Protected files are handled separately via backup/restore
        if git merge template/main -X theirs --no-edit --allow-unrelated-histories; then
          echo "✅ Merge completed successfully"
          MERGE_STATUS="success"
        else
          echo "❌ Merge failed - conflicts detected"
          MERGE_STATUS="failed"
          # Abort the merge
          git merge --abort
          echo "merge_status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Restore ignored files after merge
        for file in "${IGNORE_FILES[@]}"; do
          if [ -e "$file.backup" ]; then
            echo "Restoring: $file"
            rm -rf "$file" 2>/dev/null || true
            mv "$file.backup" "$file" 2>/dev/null || true
          fi
        done
        
        # Add and commit the restored files
        git add .
        git commit -m "Restore custom files after template sync" || true
        
        # Push directly to main
        git push origin main
        
        echo "merge_status=success" >> $GITHUB_OUTPUT
        echo "archive_branch=$ARCHIVE_BRANCH" >> $GITHUB_OUTPUT

    - name: Create summary
      if: steps.check-updates.outputs.has_updates == 'true' && steps.sync-changes.outputs.merge_status == 'success'
      run: |
        echo "## ✅ Template Sync Completed Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Template commit:** \`${{ steps.check-updates.outputs.template_commit }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Sync date:** $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)" >> $GITHUB_STEP_SUMMARY
        echo "**Archive branch:** \`${{ steps.sync-changes.outputs.archive_branch }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Changes have been directly merged to the main branch." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Protected Files" >> $GITHUB_STEP_SUMMARY
        echo "The following files were preserved during sync:" >> $GITHUB_STEP_SUMMARY
        echo "- \`paths.json\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`fstab.yaml\`" >> $GITHUB_STEP_SUMMARY

    - name: Merge failed notification
      if: steps.check-updates.outputs.has_updates == 'true' && failure()
      run: |
        echo "## ❌ Template Sync Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Reason:** Merge conflicts detected that could not be auto-resolved" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendation" >> $GITHUB_STEP_SUMMARY
        echo "Use the **'Sync Template Repository'** workflow instead, which creates a PR for manual review." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The repository state has been preserved (merge was aborted)." >> $GITHUB_STEP_SUMMARY

    - name: No updates available
      if: steps.check-updates.outputs.has_updates == 'false'
      run: |
        echo "## ✅ Repository Up to Date" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "No updates available from template repository." >> $GITHUB_STEP_SUMMARY
        echo "Current repository is already in sync with template." >> $GITHUB_STEP_SUMMARY

